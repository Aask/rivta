<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetCareDocumentation" resourceRoot="${projectDir}" soapui-version="4.5.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetCareDocumentationResponderBinding" type="wsdl" bindingName="{urn:riv:clinicalprocess:healthcond:description:GetCareDocumentation:2:rivtabp21}GetCareDocumentationResponderBinding" soapVersion="1_1" anonymous="optional" definition="../../schemas/interactions/GetCareDocumentationInteraction/GetCareDocumentationInteraction_2.0_RIVTABP21.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:\C:\projekt\rivta\ServiceInteractions\riv\clinicalprocess\healthcond\description\trunk\schemas\interactions\GetCareDocumentationInteraction\GetCareDocumentationInteraction_2.0_RIVTABP21.wsdl"><con:part><con:url>file:\C:\projekt\rivta\ServiceInteractions\riv\clinicalprocess\healthcond\description\trunk\schemas\interactions\GetCareDocumentationInteraction\GetCareDocumentationInteraction_2.0_RIVTABP21.wsdl</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<wsdl:definitions name="GetCareDocumentationInteraction" targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentation:2:rivtabp21" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tjsr="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:tjsi="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationInitiator:2" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentation:2:rivtabp21" xmlns:itr="urn:riv:itintegration:registry:1">
  <xs:annotation>
    <xs:documentation>Tjänsteinteraktionens namn: GetCareDocumentationInteraction
			 Beskrivning: 
			   Request care documentation for a subject of care
			 Revisioner: 
			 Tjänstedomän: clinicalprocess:healthcond:description
			 Tjänsteinteraktionstyp: Fråga-Svar
			 WS-profil: RIVTABP21
			 Förvaltas av: Sveriges Kommuner och Landsting</xs:documentation>
  </xs:annotation>
  <wsdl:types>
    <xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentation:2:rivtabp21">
      <xs:import schemaLocation="GetCareDocumentationResponder_2.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2"/>
      <xs:import schemaLocation="../../core_components/itintegration_registry_1.0.xsd" namespace="urn:riv:itintegration:registry:1"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetCareDocumentationRequest">
    <wsdl:part name="LogicalAddress" element="itr:LogicalAddress">
      <wsdl:documentation>National: The HSA-id of Inera AB ("national" aggregation service)
			Regional: The HSA-id of Inera AB (regional aggregation service)
			Specific Source system: The HSA-id of the source system</wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="parameters" element="tjsr:GetCareDocumentation"/>
  </wsdl:message>
  <wsdl:message name="GetCareDocumentationResponse">
    <wsdl:part name="parameters" element="tjsr:GetCareDocumentationResponse"/>
  </wsdl:message>
  <wsdl:portType name="GetCareDocumentationResponderInterface">
    <wsdl:operation name="GetCareDocumentation">
      <wsdl:input message="tns:GetCareDocumentationRequest"/>
      <wsdl:output message="tns:GetCareDocumentationResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetCareDocumentationResponderBinding" type="tns:GetCareDocumentationResponderInterface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetCareDocumentation">
      <soap:operation soapAction="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2:GetCareDocumentation" style="document"/>
      <wsdl:input>
        <soap:header use="literal" message="tns:GetCareDocumentationRequest" part="LogicalAddress"/>
        <soap:body use="literal" parts="parameters"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetCareDocumentationResponderService">
    <wsdl:port name="GetCareDocumentationResponderPort" binding="tns:GetCareDocumentationResponderBinding">
      <soap:address location="http://tempuri.org"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\projekt\rivta\ServiceInteractions\riv\clinicalprocess\healthcond\description\trunk\schemas\interactions\GetCareDocumentationInteraction\GetCareDocumentationResponder_2.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:core="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_2.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:2"/>
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_enum_2.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:element name="GetCareDocumentation" type="tns:GetCareDocumentationType"/>
  <xs:element name="GetCareDocumentationResponse" type="tns:GetCareDocumentationResponseType"/>
  <xs:complexType name="GetCareDocumentationType">
    <xs:sequence>
      <xs:element name="careUnitHSAid" type="core:HSAIdType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="patientId" type="core:PatientIdType"/>
      <xs:element name="timePeriod" type="core:DatePeriodType" minOccurs="0"/>
      <xs:element name="sourceSystemHSAid" type="core:HSAIdType" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GetCareDocumentationResponseType">
    <xs:annotation>
      <xs:documentation>careDocumentation: 
					De vårddokument som matchar begäran.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="careDocumentation" type="core:CareDocumentationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\projekt\rivta\ServiceInteractions\riv\clinicalprocess\healthcond\description\trunk\schemas\core_components\clinicalprocess_healthcond_description_2.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="./clinicalprocess_healthcond_description_enum_2.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:complexType name="CareDocumentationType">
    <xs:sequence>
      <xs:element name="careDocumentationHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="careDocumentationBody" type="tns:CareDocumentationBodyType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareDocumentationBodyType">
    <xs:annotation>
      <xs:documentation>clinicalDocumentNote: 
					Dokument/anteckning
				multimediaEntry:
					Multimedia som finns i dokumentet, motsvaras av platshållare i careDocumentNoteText</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="clinicalDocumentNote" type="tns:ClinicalDocumentNoteType"/>
      <xs:element name="multimediaEntry" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--@TODO better names for clinicalDocumentNoteCode-->
  <xs:complexType name="ClinicalDocumentNoteType">
    <xs:annotation>
      <xs:documentation>
        Dokument/anteckning

                clinicalDocumentNoteCode: 
                    Typ av vård- och omsorgsdokument. 
                clinicalDocumentNoteTitle: 
                    Titel på dokument
                clinicalDocumentNoteText: 
                    Själva dokumentet. 
                    Formatet i textfältet ska följa HL7 CDA "Narrative Block". 
                    Om dokumentet innehåller multimedia läggs en platshållare i texten enligt formatet
        <renderMultiMedia referencedObject="MM1"/>
        . 
                    Innehåller dokumentet fler multimedia läggs ytterligare platshållare i texten, där referencesObject får namn "MM2", "MM3" osv
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="clinicalDocumentNoteCode" type="codes:ClinicalDocumentNoteCodeEnum" minOccurs="0"/>
      <xs:element minOccurs="0" name="clinicalDocumentTypeCode" type="codes:ClinicalDocumentTypeCodeEnum"/>
      <xs:element name="clinicalDocumentNoteTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="clinicalDocumentNoteText" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientSummaryHeaderType">
    <xs:annotation>
      <xs:documentation>documentId: 
                    Vårddokumentets unika identifierare.
                    OID kan sättas till 1.2.752.129.2.1.2.1 
                    (Icke-nationell identifierare Org+lokalt unikt id)
				sourceSystemHSAid: 
	                HSAid för det system som dokumentet är skapat i
                documentTitle: 
                    Titel på dokumentet/anteckningen
                documentTime: 
                    Relevant tid, definieras för varje meddelande
                patientId: 
                    Patientens ID. Root sätts till typ av patientidentifierare
                    Bland tillåtna typer för finns: 
                    personnummer (1.2.752.129.2.1.3.1), 
                    samordningsnummer (1.2.752.129.2.1.3.3), 
                    reservnummer SLL (1.2.752.97.3.1.3)
                author
                    Information om författare till dokumentet
                legalAuthenticator
                    Information om vem som signerat informationen i dokumentet.
                approvedForPatient:
                    Anger om information får delas till patient. Värdet sätts i 
                    sådant fall till true, i annat fall till false.
                careContactId:
                    Identitet för den vård- och omsorgskontakt som föranlett den 
                    information som omfattas av dokumentet. Identiteten är unik 
                    inom källsystemet.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAid" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType"/>
      <xs:element name="patientId" type="tns:PatientIdType"/>
      <xs:element name="author" type="tns:AuthorType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AuthorType">
    <xs:annotation>
      <xs:documentation>Information om författare till dokumentet
			
				authorTime: 
					Tidpunkt då dokumentet skapades
				authorHSAid: 
					HSA-id för författare. 
					OID för HSA används (1.2.752.129.2.2.1.4)
				authorRoleCode: 
					Kod för författarens befattning, enligt kodverket Befattning (OID 1.2.752.129.2.2.1.4)
				authorName: 
					Namn på författaren
				careUnitHSAid: 
					HSA-id för den enhet som författaren är uppdragstagare hos
				careUnitName: 
					Namn på den enhet som författaren är uppdragstagare hos
				careUnitAddress: 
					Adress till den enhet som författaren är uppdragstagere hos
				careGiverHSAid:
					HSA-id för vårdgivaren, som är vårdgivare för den enhet som författaren är uppdragstagare för</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="authorHSAid" type="tns:HSAIdType"/>
      <xs:element name="authorRoleCode" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="authorOtherRole" type="tns:AuthorOtherRoleType"/>
      <xs:element name="authorName" type="xs:string" minOccurs="0"/>
      <xs:element name="authorOrgUnitHSAid" type="tns:HSAIdType"/>
      <xs:element name="authorOrgUnitName" type="xs:string"/>
      <xs:element name="authorOrgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="careUnitHSAid" type="tns:HSAIdType"/>
      <xs:element name="careGiverHSAid" type="tns:HSAIdType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LegalAuthenticatorType">
    <xs:annotation>
      <xs:documentation>Information om signering
                
                signatureTime: 
                    Tidpunkt för signering, format ÅÅÅÅMMDDttmmss. 
                assignedEntity: 
                    Information om person som signerat dokumentet</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="signatureTime" type="tns:TimeStampType"/>
      <xs:element name="legalAuthenticatorHSAid" type="tns:HSAIdType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <!--Below: only helper types allowed.
        
        A helper type is a type used in one ore more of the domain schema common types.
        It can also be a type used in two or more service schemas.-->
  <xs:complexType name="DatePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                    Startdatum på formatet ÅÅÅÅMMDD
                end: 
                    Slutdatum på formatet ÅÅÅÅMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:DateType"/>
      <xs:element name="end" type="tns:DateType"/>
    </xs:sequence>
  </xs:complexType>
  <!--YYYYMMDD-->
  <xs:simpleType name="DateType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])"/>
    </xs:restriction>
  </xs:simpleType>
  <!--@TODO Should we have maxlength 64?-->
  <xs:simpleType name="HSAIdType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="MultimediaType">
    <xs:sequence>
      <xs:element name="id" type="xs:string" minOccurs="0"/>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:choice>
        <xs:element name="value" type="xs:base64Binary"/>
        <xs:element name="reference" type="xs:anyURI"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientIdType">
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                Startdatum på formatet YYYYMMDDhhmmss
                end: 
                Slutdatum på formatet YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:TimeStampType"/>
      <xs:element name="end" type="tns:TimeStampType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="TimeStampType">
    <xs:annotation>
      <xs:documentation>A quantity specifying a point on the axis of natural time.
                A point in time is most often represented as a calendar
                expression.
                
                The time has the format YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|1[0-9]|2[0123])([0-5])([0-9])([0-5])([0-9])"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="AuthorOtherRoleType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="authorOtherRoleCode" type="xs:string"/>
      <xs:element name="authorOtherRoleCodeOID" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\projekt\rivta\ServiceInteractions\riv\clinicalprocess\healthcond\description\trunk\schemas\core_components\clinicalprocess_healthcond_description_enum_2.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:enums:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:simpleType name="ClinicalDocumentNoteCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk Anteckningstyp (1.2.752.129.2.2.2.11):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="utr">
        <xs:annotation>
          <xs:documentation>Utredning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="atb">
        <xs:annotation>
          <xs:documentation>Åtgärd/Behandling</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sam">
        <xs:annotation>
          <xs:documentation>Sammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sao">
        <xs:annotation>
          <xs:documentation>Samordning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ins">
        <xs:annotation>
          <xs:documentation>Inskrivning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="slu">
        <xs:annotation>
          <xs:documentation>Slutanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="auf">
        <xs:annotation>
          <xs:documentation>Anteckning utan fysiskt möte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sva">
        <xs:annotation>
          <xs:documentation>Slutenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="bes">
        <xs:annotation>
          <xs:documentation>Besöksanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypeEnum">
    <xs:union memberTypes="tns:ApplicationMediaEnum tns:AudioMediaTypeEnum tns:ImageMediaTypeEnum tns:ModelMediaTypeEnum tns:MultipartMediaTypeEnum tns:TextMediaTypeEnum tns:VideoMediaTypeEnum"/>
  </xs:simpleType>
  <xs:simpleType name="ApplicationMediaEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="application/dicom"/>
      <xs:enumeration value="application/msword"/>
      <xs:enumeration value="application/pdf"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AudioMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="audio/basic"/>
      <xs:enumeration value="audio/k32adpcm"/>
      <xs:enumeration value="audio/mpeg"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ImageMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="image/g3fax"/>
      <xs:enumeration value="image/gif"/>
      <xs:enumeration value="image/jpeg"/>
      <xs:enumeration value="image/png"/>
      <xs:enumeration value="image/tiff"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ModelMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="model/vrml"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MultipartMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="multipart/x-hl7-cda-level1"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TextMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="text/html"/>
      <xs:enumeration value="text/plain"/>
      <xs:enumeration value="text/rtf"/>
      <xs:enumeration value="text/sgml"/>
      <xs:enumeration value="text/x-hl7-ft"/>
      <xs:enumeration value="text/xml"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="VideoMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="video/mpeg"/>
      <xs:enumeration value="video/x-avi"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ClinicalDocumentTypeCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk (?.?.?.?.?.?):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="epi">
        <xs:annotation>
          <xs:documentation>Epikris</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="int">
        <xs:annotation>
          <xs:documentation>Intagninganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="dag">
        <xs:annotation>
          <xs:documentation>Daganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ova">
        <xs:annotation>
          <xs:documentation>Öppenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovs">
        <xs:annotation>
          <xs:documentation>Öppenvårdssammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovr">
        <xs:annotation>
          <xs:documentation>Övrigt dokument</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\projekt\rivta\ServiceInteractions\riv\clinicalprocess\healthcond\description\trunk\schemas\core_components\itintegration_registry_1.0.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="urn:riv:itintegration:registry:1" elementFormDefault="qualified" version="1.0" xmlns="urn:riv:itintegration:registry:1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Beskrivning: 	Grundläggande informationsobjekt för domänen itintegration:registry (adressering av tjänster)
			
			Revisionshistorik: 2011-06-27 Mats Ekhammar, Callista Enterprise AB
				Added ServiceContractType
			
			Datum:			2011-05-04
			Beskrivning:	Initial version
			Författare:		marcus.krantz@callistaenterprise.se</xs:documentation>
  </xs:annotation>
  <xs:element name="LogicalAddress" type="LogicalAddressType"/>
  <xs:element name="ServiceContract" type="ServiceContractType"/>
  <xs:simpleType name="LogicalAddressType">
    <xs:annotation>
      <xs:documentation>Defines the type for logical address according to national reference architecture.
				Superseeds wsa:To as type for logical address header in RIVTA 2.1.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="ServiceContractType">
    <xs:annotation>
      <xs:documentation>Type which describes a service contract. Used in interaction GetSupportedServiceContracts.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ServiceContractNamespace" type="xs:anyURI"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${webServiceUrl}</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2:GetCareDocumentation" name="GetCareDocumentation" bindingOperationName="GetCareDocumentation" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAid>?</urn1:careUnitHSAid>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
         </urn1:patientId>
         <!--Optional:-->
         <urn1:timePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
         </urn1:timePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAid>?</urn1:sourceSystemHSAid>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2:GetCareDocumentation"/></con:call></con:operation></con:interface><con:testSuite name="TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Date boundaries" searchProperties="true" id="ceabba30-bf87-4c03-9396-a27a635cf23d"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("Date Boundaries")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Response DateBoundaries"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + "/constraints.xml"))

failures.each { failure -> contextHelper.fail(failure.text) }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert date range"><con:configuration><scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documents = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation')

if (documents.length == 0) {
	contextHelper.fail("Response contains no documents.")
	return
}

documents.each { doc -> 
	def docHolder = new XmlHolder( doc )
	holder.namespaces.each {key, value -> docHolder.namespaces[key] = value}
	

	def documentId = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId')
	def documentTime = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentTime')
	def authorTime = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:author/urn1:authorTime')
	def signatureTime = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator/urn1:signatureTime')

	if (context.timePeriodStart < documentTime[0..7] && documentTime[0..7] <= context.timePeriodEnd) {
		return
	}
	if (context.timePeriodStart < authorTime[0..7] && authorTime[0..7] <= context.timePeriodEnd) {
		return
	}
	if (signatureTime != null && context.timePeriodStart < signatureTime[0..7] && signatureTime[0..7] <= context.timePeriodEnd) {
		return
	}

	contextHelper.fail("Response contains a record outside given date range ${context.timePeriodStart} - ${context.timePeriodEnd}. DocumentId: $documentId")
}]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert DocumentId's"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id -> 
	if (unexpectedDocumentIds.contains(id)) {
		contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
	}
}
expectedDocumentIds.each {id -> 
	if (!documentIds.contains(id)) {
		contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
	}
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareUnitHSAid Filter" searchProperties="true" id="99202dba-188d-44d2-9aec-7bc206afebf1"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareUnitHsaId Filter")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Response CareUnitHsaId"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:careUnitHSAid>${careUnitHSAid}</urn1:careUnitHSAid>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + "/constraints.xml"))

failures.each { failure -> contextHelper.fail(failure.text) }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert CareUnitHSAid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documents = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation')

if (documents.length == 0) {
	contextHelper.fail("Response contains no documents.")
	return
}

documents.each { doc -> 
	def docHolder = new XmlHolder( doc )
	holder.namespaces.each {key, value -> docHolder.namespaces[key] = value}
	

	def documentId = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId')
	def careUnitHSAid = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:author/urn1:careUnitHSAid')
	
	if (careUnitHSAid != context.careUnitHSAid) {
		contextHelper.fail("Response contains a document with other CareUnitHSAid. CareUnitHSAid: ${careUnitHSAid} DocumentId: ${documentId}")
	}
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert DocumentId's"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id -> 
	if (unexpectedDocumentIds.contains(id)) {
		contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
	}
}
expectedDocumentIds.each {id -> 
	if (!documentIds.contains(id)) {
		contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
	}
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Only PatientId" searchProperties="true" id="726e1d53-f58c-44dd-8908-66e8776a159c"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("Only PatientId")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Only PatientId"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + "/constraints.xml"))

failures.each { failure -> contextHelper.fail(failure.text) }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert PatientId"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documents = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation')

if (documents.length == 0) {
	contextHelper.fail("Response contains no documents.")
	return
}

documents.each {doc -> 
	def docHolder = new XmlHolder( doc )
	holder.namespaces.each {key, value -> docHolder.namespaces[key] = value}
	

	def documentId = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId')
	def patientId = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id')
	def patientIdType = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:type')

	if (patientId != context.patientId || patientIdType != context.patientIdType) {
		contextHelper.fail("Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}")
	}
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert DocumentId's"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id -> 
	if (unexpectedDocumentIds.contains(id)) {
		contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
	}
}
expectedDocumentIds.each {id -> 
	if (!documentIds.contains(id)) {
		contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
	}
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExisting PatientId" searchProperties="true" id="619cb2e9-99a9-4b0e-9d1c-033a369f473f"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExisting PatientId")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Empty Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert Empty Response"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documents = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation')

if (documents.length != 0) {
	contextHelper.fail("Response should be empty for PatientId: ${context.patientId} PatientIdType: ${context.patientIdType}")
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareContactId Filter" searchProperties="true" id="79083793-e02e-4e68-a0ee-00759a8eb403"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def reader = new XmlDataReader(context, dataFile)

reader.load("CareContactId Filter")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactId Filter"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAid>${sourceSystemHSAid}</urn1:sourceSystemHSAid>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + "/constraints.xml"))

failures.each { failure -> contextHelper.fail(failure.text) }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert CareContactId"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documents = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation')

if (documents.length == 0) {
	contextHelper.fail("Response contains no documents.")
	return
}

documents.each {doc -> 
	def docHolder = new XmlHolder( doc )
	holder.namespaces.each {key, value -> docHolder.namespaces[key] = value}
	

	def documentId = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId')
	def sourceSystemHSAid = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:sourceSystemHSAid')
	def careContactId = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:careContactId')

	if (sourceSystemHSAid != context.sourceSystemHSAid || careContactId != context.careContactId) {
		contextHelper.fail("Response contains a document with other CareContactId. CareContactId: ${careContactId}, SourceSystemHSAid: ${sourceSystemHSAid} DocumentId: ${documentId}")
	}
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert DocumentId's"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id -> 
	if (unexpectedDocumentIds.contains(id)) {
		contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
	}
}
expectedDocumentIds.each {id -> 
	if (!documentIds.contains(id)) {
		contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
	}
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExisting CareContactId" searchProperties="true" id="4bc42ef6-e15a-41ae-b62f-db96088526e8"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExisting CareContactId")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Empty Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAid>${sourceSystemHSAid}</urn1:sourceSystemHSAid>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert Empty Response"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documents = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation')

if (documents.length != 0) {
	contextHelper.fail("Response should be empty for CareContactId: ${context.careContactId} SourceSystemHSAid: ${context.sourceSystemHSAid}")
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Http-header Filter" searchProperties="true" id="91c0664d-e5eb-4d44-82e6-b39a924a27e0"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def reader = new XmlDataReader(context, dataFile)

reader.load("Http-header Filter")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Http-header Filter"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + "/constraints.xml"))

failures.each { failure -> contextHelper.fail(failure.text) }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert PatientId"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documents = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation')

if (documents.length == 0) {
	contextHelper.fail("Response contains no documents.")
	return
}

documents.each {doc -> 
	def docHolder = new XmlHolder( doc )
	holder.namespaces.each {key, value -> docHolder.namespaces[key] = value}
	

	def documentId = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId')
	def patientId = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id')
	def patientIdType = docHolder.getNodeValue('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:type')

	if (patientId != context.patientId || patientIdType != context.patientIdType) {
		contextHelper.fail("Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}")
	}
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert DocumentId's"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetCareDocumentationResponse/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id -> 
	if (unexpectedDocumentIds.contains(id)) {
		contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
	}
}
expectedDocumentIds.each {id -> 
	if (!documentIds.contains(id)) {
		contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
	}
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Fault tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify SourceSystemHSAid and CareContactId" searchProperties="true" id="becf751c-3573-493c-9c62-c0fe83b06aff"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareContactId and SourceSystemHsaId")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="SoapFault"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAid>${sourceSystemHSAid}</urn1:sourceSystemHSAid>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" name="SOAP Fault"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify SourceSystemHSAid and LogicalAddress" searchProperties="true" id="3529df99-aef5-4803-925b-635f0c4fb5c7"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("SourceSystemHsaId and LogicalAddress")</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCareDocumentationResponderBinding</con:interface><con:operation>GetCareDocumentation</con:operation><con:request name="Call GetCareDocumentation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="SoapFault"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAid>${sourceSystemHSAid}</urn1:sourceSystemHSAid>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" name="SOAP Fault"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/></con:soapui-project>