#summary Versionering av tjänstekontrakt

<wiki:toc max_depth="3" />

= Versionering av tjänstekontrakt  =

Här beskrivs problemställning och principlösning rörande versionering av tjänstekontrakt. Denna beskrivning utgör motiv för de regler för tjänstescheman som styr in versioneringsegenskaper i tjänsteproducenter. Principlösningen än anpassade för att fungera med moderna utvecklingsverktyg för Microsoft (.Net WCF) och Java (JAX WS och JAXB) med ansatsen att generera källkod (C# eller Java) ugående från tjänstekontrakt definierade mha WSDL och XML Scheman.

==Behov av versionering==

Utgångspunkten är att det behövs strategier för att minska behovet av nya versioner (genom bakåt- och framåtkompatibilitet) men samtidigt tydliggöra regler för uttag av nya versioner då det inte är möjligt eller ändamålsenligt med bevarad kompatibilitet.

==Terminologi och grafisk representation==

Se terminologi och grafisk representation för beskrivning av de termer som används nedan samt hur de representeras grafiskt.

Förtydliganden specifikt för att uttrycka beroenden till versioner av tjänstescheman:

*Versionsnummer*

Versionsnummer sätts på ett tjänsteschema enligt formatet: *major.minor*

   * För nya kompatibla versioner behålls major-siffran med minor-siffran stegas upp ett steg, t ex från 1.0 till 1.1.
   * För nya icke kompatibla versioner stegas major-siffran upp och minor-siffran sätts tillbaka till 0, t ex från 1.1 till 2.0. 

Vill man beskriva att meddelandet innehåller element från en viss version av ett tjänsteschema (v1.0 i exemplet nedan) visualiseras det enligt:
Anm. "e1.0" anger element från v1.0 av tjänsteschemat

*legend-meddelande-versioned.png*

Vill man beskriva att meddelandet innehåller element från flera olika versioner av ett tjänsteschema (v1.0 och v1.1 i exemplet nedan) visualiseras det enligt:
Anm. I bilden försärks att element från v1.1 har tillförts meddelandet

*legend-meddelande-multi-versions.png*

En initiativtagare byggd för v1.0 av ett tjänsteschema visualiseras enligt:

*legend-initiativtagare-versioned.png*

En utförare byggd för v1.0 av ett tjänsteschema visualiseras enligt:

*legend-utforare-versioned.png*

==Bakåt och framåtkompatibilitet==

   * Bakåtkompatiblitet innebär att en avsändare kan skicka meddelande till en mottagare där meddelandet följer en äldre version av tjänstekontraktet än vad mottagare är baserad på. Detta kräver att mottagaren kan behandla meddelanden av den äldre versionen trots att dessa saknar de nya elementen. Bakåtkompatiblitet illustreras med hjälp av följande bild: 

*Versioning_10_to_11.png*

   * Framåtkompatibilitet innebär att en avsändare kan skicka meddelande till en mottagare där meddelandet följer en nyare version av tjänstekontraktet än vad mottagaren är baserad på. Detta kräver att mottagaren kan bortse från informationen som tillförts i den nyare versionen av meddelandet. 

*Versioning_11_to_10.png*

==Teknisk realisation av framåt och bakåtkompatibilitet==

I praktiken finns det i huvudsak en typ av förändring som uppfyller såväl bakåt- som framåtkompatibilitet: tillägg av nya, icke-obligatoriska element.

Tekniskt sett handlar det om att säkerställa att ett meddelande alltid kan valideras mot den version av XML Schemat som befintliga avsändare och mottagare byggdes för (t ex genereras C#/Java-källkod för att tolka tjänstekontraktets in- och ut-meddelanden. Över tiden kommer olika avsändare och mottagare ha källkld som är genererad utgående från olika minor-versioner av tjänstekontraktet).

En försvårande omständighet är i detta sammanhang att många verktyg för tolkning och validering av XML tagit fasta på ett krav i XML Schema-specifikationen som benämns "Unique Particle Attribution", se Wiki för referensmaterial.

W3C beskriver ett antal strategier för versionering som tar hänsyn till "Unique Particle Attribution". RIV Tekniska anvisningar tillämpar den strategi som benämns "2.5". Det är en erfarenhetsmässigt påvisad metod för att tekniskt realisera krav på bakåt- och framåtkompatibilitet som bl.a. tillämpas inom OASIS (WS-Policy, WS-Topic m.fl). Metoden ställer följande krav på ett tjänsteschema:

   * Versionsdeklaration: Target-namespace skall innehålla major-versionen.
   * Namespaces i instans-dokument: Schema-attributet elementFormDefault skall vara satt till 'qualified' i alla scheman.
   * xsd:any för framåtkompatibilitet: Använd xsd:any-element som "placeholder" för framtida, icke-obligatoriska element: 

       <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded" namespace="##other"/>

   * Element som introduceras i en ny minor-version läggs i ett separat XML Schema med target-namespace som skiljer sig från major-versionens. Detta är en konsekvens av any-elements deklaration enligt ovan.
   * Utöka nya framåt och bakåtkompatibla versioner av XML Schemat endast med optional element, dvs element som har minOccurs satt till "0". 

Se RIV Teknisk anvisning - Tjänsteschema för detaljerade riktlinjer.
Se RIV Teknisk anvisning - Basic Profile v2.0: Referensapplikation för källkodsexempel.

==Icke kompatibla ändringar==

När det inte är möjligt eller ändamålsenligt för en ny version av ett tjänstekontrakt att vara kompatibelt med befintlig version måste mottagaren tillhandahålla endpunkter för såväl den befintliga versionen som den nya icke kompatibla versionen av tjänstekontraktet. Den gamla versionen av tjänstekontraktet måste stödjas under en rimlig tidsrymd så att befintliga avsändare som använder den kan uppgraderas till att använda den nya versionen. Först då kan mottagaren ta bort endpunkten för den gamla versionen.

Anm. Vad som är en rimlig tidsperiod för avsändare att gå över till en ny icke bakåtkompatibel version av en tjänst är något som inblandade avsändare och mottagare måste komma överens om per fall, alternativt följa riktlinjer i gällande kontrakt.

Följande bild illustrerar behov av två endpunkter hos mottagaren vid införande av en ny icke kompatibel version, v2.0, av ett tjänstekontrakt:

*Versioning_10_and_20.png*

Avsändare A använder initialt den gamla versionen, v1.0, och avsändare B använder den nya versionen, v2.0. När avsändare A uppdaterat till den nya versionen kan mottagaren ta bort endpunkten för den gamla versionen. Slutresultatet ser då ut enligt följande:

*Versioning_20.png*

==Versionering och tjänsteinteraktionstyper==

När det gäller tjänsteinteraktionstyperna informatonsspridning och uppdrag-resultat så är det väldigt lätt att applicera det generella resonemanget ovan då dessa är baserade på enkelriktade in-operationer.

För tjänsteinteraktionstypen informatonsspridning kan man i samtliga resonemang ovan ersätta avsändare med initiativtagare och mottagare med utförare samt ersätta anropspilen med en in-operation, t ex för bakåtkompatibilitet:

*Versioning_inOperation_10_to_11.png*

För tjänsteinteraktionstypen uppdrag-resultat så byter initiativtagare och utförare avsändare/mottagare-roll då svarsmeddelandet skickas men i övrigt är resonemanget samma som ovanstående.

För tjänsteinteraktionstypen fråga-svar blir det dock lite mer komplext extersom tjänsteinteraktionstypen är baserad på en inUt-operation, dvs utföraren skickar ett svarsmeddelande (synkront) tillbaka till mottagaren.

==Bakåt och framåtkompatibilitet för tjänsteinteraktionstypen Fråga-svar==

För tjänsteinteraktiontypen Fråga-svar uppträder en initiativtagare som avsändare för request-meddelandet och som mottagare för response-meddelandet och vise versa för en utförare. Framåt- och bakåtkompatibilitet gäller med andra ord både in- och ut-meddelanden.

Följande bild illustrerar behov av bakåt och framåtkompatiblitet i fallet med en gammal initiativtagare och en ny utförare:

*Versioning_FragaSvar_10_to_11.png*

I detta exempel måste utföraren (v1.1) kunna behandla request-meddelanden av den äldre versionen (v1.0) trots att dessa saknar de nya elementen samt initiativtagaren (v1.0) måste ignorera nya element som kommer i v1.1-response-meddelanden.

Följande bild illustrerar behov av bakåt och framåtkompatiblitet i fallet med en ny initiativtagare och en gammal utförare:

*Versioning_FragaSvar_11_to_10.png*

I detta exempel måste utföraren (v1.0) ignorera nya element som kommer i v1.1-request-meddelanden samt initiativtagaren (v1.1) måste kunna behandla response-meddelanden av den äldre versionen (v1.0) trots att dessa saknar de nya elementen. 